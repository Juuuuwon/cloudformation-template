Parameters:
  AutoScalingGroupName:
    Type: String
    Description: "The Name of Auto Scaling Group"
    Default: skills-app

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "The Subnet Ids for launched instances"

  TargetGroupARNs:
    Type: CommaDelimitedList
    Description: "The Target Group Arns that will be attached instance to alb"

  AMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Description: "The AMI for launched instances"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    # Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

  InstanceType:
    Type: String
    Description: "Instance type for instances"
    Default: t3.medium

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The Keypair for launched instances"
    Default: ""

  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: "The Security Group Ids for launched instances"

Conditions:
  NoKeyPair: !Equals [!Ref KeyPair, ""]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "ASG configuration"
        Parameters:
          - AutoScalingGroupName
          - SubnetIds
          - TargetGroupARNs
      - Label:
          default: "Instance Configuration"
        Parameters:
          - AMI
          - InstanceType
          - KeyPair
          - SecurityGroupIds

Resources:
  #
  # IAM Role
  #
  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AutoScalingGroupName}-role"
      Description: !Sub "The role for ${AutoScalingGroupName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        # - arn:aws:iam::aws:policy/AmazonS3FullAccess

  #
  # IAM Instance Profile
  #
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AutoScalingGroupName}-role"
      Path: /
      Roles:
        - !Ref Role

  #
  # LaunchTemplate
  #
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AutoScalingGroupName}-lt"
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        SecurityGroupIds: !Ref SecurityGroupIds
        IamInstanceProfile:
          Name: !Ref InstanceProfile

        UserData:
          Fn::Base64: |
            #!/bin/bash

            yum install -y amazon-cloudwatch-agent

            mkdir -p /var/log/app/
            touch /var/log/app/app.log

            cat << EOF > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/app/app.log",
                        "log_group_name": "/skills/app",
                        "log_stream_name": "{instance_id}",
                        "timezone": "Local"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            systemctl enable amazon-cloudwatch-agent --now

            mkdir -p /opt/app
            cp /opt/app

            wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
            aws s3 cp s3://mybucket/server .
            chmod +x ./server

            ./server > /var/log/app/app.log 2>&1 &

        KeyName: !If
          - NoKeyPair
          - !Ref AWS::NoValue
          - !Ref KeyPair
        Monitoring:
          Enabled: true
        MetadataOptions:
          HttpTokens: required
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp3
              VolumeSize: 10
              Iops: 3000
              Throughput: 125
              Encrypted: true
        TagSpecifications:
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "${AutoScalingGroupName}"

  #
  # Auto Scaling Group
  #
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupName
      Cooldown: "120"
      DesiredCapacityType: units
      MinSize: "2"
      MaxSize: "20"
      # DesiredCapacity: "2"
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
            - GroupInServiceCapacity
            - GroupPendingCapacity
            - GroupStandbyCapacity
            - GroupTerminatingCapacity
            - GroupTotalCapacity
            - WarmPoolDesiredCapacity
            - WarmPoolWarmedCapacity
            - WarmPoolPendingCapacity
            - WarmPoolTerminatingCapacity
            - WarmPoolTotalCapacity
            - GroupAndWarmPoolDesiredCapacity
            - GroupAndWarmPoolTotalCapacity
      Tags:
        - PropagateAtLaunch: true
          Key: Name
          Value: !Sub "${AutoScalingGroupName}"
      TargetGroupARNs: !Ref TargetGroupARNs
      VPCZoneIdentifier: !Ref SubnetIds

  #
  # Scaling Policy
  #
  TargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling # TargetTrackingScaling | StepScaling | SimpleScaling
      AutoScalingGroupName: !Ref AutoScalingGroup
      TargetTrackingConfiguration:
        DisableScaleIn: False
        PredefinedMetricSpecification:
          # Available Value : ASGAverageCPUUtilization | ASGAverageNetworkIn | ASGAverageNetworkOut | ALBRequestCountPerTarget
          PredefinedMetricType: ASGAverageCPUUtilization
          # ResourceLabel: String # When Using ALBRequestCountPerTarget
        TargetValue: 60
  # TargetTrackingScalingPolicy2:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyType: TargetTrackingScaling # TargetTrackingScaling | StepScaling | SimpleScaling
  #     AutoScalingGroupName: !Ref AutoScalingGroup
  #     TargetTrackingConfiguration:
  #       DisableScaleIn: False
  #       PredefinedMetricSpecification:
  #         # Available Value : ASGAverageCPUUtilization | ASGAverageNetworkIn | ASGAverageNetworkOut | ALBRequestCountPerTarget
  #         PredefinedMetricType: ALBRequestCountPerTarget
  #         ResourceLabel: app/skills-alb/4c5ecd57cb3c1c07/targetgroup/skills-app-tg/9441777001ee1066
  #       TargetValue: 60
